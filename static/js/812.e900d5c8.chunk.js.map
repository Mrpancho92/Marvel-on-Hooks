{"version":3,"file":"static/js/812.e900d5c8.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit:'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\r\n    //    <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"Error\" />  - если надо взять из папки public \r\n    ) \r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect } from 'react';\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const {/* loading, error, */ getCharacter, clearError, process, setProcess} = useMarvelService();\n    // const [loading, setLoading] = useState(true);\n    // const [error, setError] = useState(false);\n\n    // state = {\n    //     char: {},\n    //     loading: true,\n    //     error: false\n    // }\n\n    const marvelService = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    // componentDidMount() {\n    //     this.updateChar();\n    //     // this.timerId = setInterval(this.updateChar, 15000);\n    // }\n\n    // componentWillUnmount() {\n    //     clearInterval(this.timerId);\n    // }\n\n   const onCharLoaded = (char) => {\n    setChar(char);\n    // setLoading(loading => false);\n            // this.setState({\n            //     char,\n            //     loading: false\n            // })\n    }\n//    const onCharLoading = () => {\n//     setLoading(loading => true);\n//         // this.setState({\n//         //     loading: true\n//         // })\n//     }\n\n//    const onError = () => {\n//     setLoading(loading => false);\n//     setError(error => true);\n//         // this.setState({\n//         //     loading: false,\n//         //     error: true\n//         // })\n//     }\n\n   const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400-1011000) + 1011000);\n        // onCharLoading();\n        \n        /* .getAllCharacters()\n        .then(res => console.log(res)) */\n            getCharacter(id)\n            /* .then(this.onCharLoaded) */\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n            // .catch(onError);\n    }\n\n   \n    // const {char, loading, error} = this.state;\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error || !char) ? <View char={char}/> : null;\n     return (\n        <div className=\"randomchar\">\n            {/* {errorMessage}\n            {spinner}\n            {content} */}\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n   \n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n    </div>\n    )\n   }\n\nexport default RandomChar;\n\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n// import setContent from '../../utils/setContent';\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    // const [loading, setLoading] = useState(true);\n    // const [error, setError] = useState(false);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    // state = {\n    //     charList: [],\n    //     loading: true,\n    //     error: false,\n    //     newItemLoading: false,\n    //     offset: 210,\n    //     charEnded: false\n    // }\n\n    const {/* loading, error, */ getAllCharacters, process, setProcess} =  useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset , true);\n         // eslint-disable-next-line\n    }, [])\n    // componentDidMount() {\n    //     this.onRequest();\n    // }\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        // onCharListLoading();\n        // setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n            // .catch(onError)\n    }\n\n    // const onCharListLoading = () => {\n    //     setNewItemLoading(true);\n    // }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        // this.setState(({ offset, charList }) => ({\n        //     charList: [...charList, ...newCharList],\n        //     loading: false,\n        //     newItemLoading: false,\n        //     offset: offset + 9,\n        //     charEnded: ended\n        // }))\n        setCharList(charList => [...charList, ...newCharList]);\n        // setLoading(loading => false);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    // const onError = () => {\n    //     // this.setState({\n    //     //     error: true,\n    //     //     loading: false\n    //     // })\n    //     setError(true);\n    //     setLoading(loading => false);\n    // }\n\n    const itemRefs = useRef([]);\n    // setRef = (ref) => {\n    //     this.itemRefs.push(ref);\n    // }\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, index) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[index] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(index);\n                    }}\n                    onKeyDown={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(index);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n                </CSSTransition>\n            )\n        });\n        // Добавлен доп фильтр на удаление дубликатов в items, без понятия почему они там образуются.\n        // const newItems = items.filter((value, index, self) =>\n        //     index === self.findIndex((t) => (t.key === value.key)))\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul\n                className=\"char__grid\">\n                <TransitionGroup component={null}>\n                {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n\n    // const { charList, loading, error, offset, newItemLoading, charEnded } = this.state;\n\n    // const items = renderItems(charList);\n\n    // const errorMessage = error ? <ErrorMessage /> : null;\n    // const spinner = loading && !newItemLoading ? <Spinner /> : null;\n    // if (loading) {\n    //     import('./someFunck')\n    //             .then(obj => obj.logger())\n    //             .catch();\n    // }\n    // const content = !(loading || error) ? items : null;\n    \n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading); \n        // eslint-disable-next-line\n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {/* {errorMessage}\n            {spinner} */}\n            {/* {content} */}\n            {/* {items} */}\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\n/* class Concidences extends Component {\n    render() {\n        return (\n            <li ref = {this.myRef}\n                className=\"char__item\"\n                key={item.id}\n                onClick={() => this.props.onCharSelected(item.id)}>\n                <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                <div className=\"char__name\">{item.name}</div>\n            </li>\n        )\n    }\n} */\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n\n\n\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMessage/ErrorMessage';\n// import Skeleton from '../skeleton/Skeleton';\nimport setContent from '../../utils/setContent';\n\n\nimport './charInfo.scss';\n\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    // const [loading, setLoading] = useState(false);\n    // const [error, setError] = useState(false);\n\n    // state = {\n    //     char: null,\n    //     loading: false,\n    //     error: false\n    // }\n\n    const {/*  loading, error, */ getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n         // eslint-disable-next-line\n    }, [props.charId]);\n\n    // componentDidMount() {\n    //     this.updateChar();\n    // }\n\n    // useEffect(() => {\n    //     updateChar();\n    // }, [props.charId]);\n\n    // componentDidUpdate(prevProps) {\n    //     if (this.props.charId !== prevProps.charId) {\n    //         this.updateChar();\n    //     }\n    // }\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        // onCharLoading();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n        // .catch(onError);\n\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n        // setLoading(loading => false);\n        // this.setState({\n        //     char,\n        //     loading: false\n        // })\n    }\n    // const onCharLoading = () => {\n    //     setLoading(loading => true);\n    //     // this.setState({\n    //     //     loading: true\n    //     // })\n    // }\n\n    // const onError = () => {\n    //     setLoading(loading => false);\n    //     setError(error => true);\n    //     // this.setState({\n    //     //     loading: false,\n    //     //     error: true\n    //     // })\n    // }\n\n    // const { char, loading, error } = this.state;\n\n    // const setContent = (process, char) => {\n    //     switch (process) {\n    //         case 'waiting':\n    //             return <Skeleton />;\n    //             break;\n    //         case 'loading':\n    //             return <Spinner />;\n    //             break;\n    //         case 'confirmed':\n    //             return <View char={char} />;\n    //             break;\n    //         case 'error':\n    //             return <ErrorMessage />;\n    //             break;\n    //         default:\n    //             throw new Error('Unexpected process state');\n    //     }\n    // }\n\n    // const skeleton = char || loading || error ? null : <Skeleton />\n    // const errorMessage = error ? <ErrorMessage /> : null;\n    // const spinner = loading ? <Spinner /> : null;\n    // const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {/* {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n            {setContent(process, View, char)}\n        </div>\n    )\n\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;\r\n\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from \"../hooks/http.hook\";\r\n\r\n\r\nconst  useMarvelService = () => {\r\n    \r\n    const {/* loading, */ request, /* error, */ clearError, process, setProcess} = useHttp();\r\n\r\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n   const _apiKey = 'apikey=1f77ab1b7a55db4504a75980239d5ccb';\r\n   const _baseOffset = 210;\r\n\r\n    // getResource = async (url) => {\r\n    //     let res = await fetch(url);\r\n        \r\n    //     if (!res.ok) {\r\n    //         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    //     }\r\n         \r\n    //     return await res.json();\r\n    // }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?issueNumber=1&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n     }\r\n\r\n     const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n     };\r\n\r\n   const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description  \r\n                    ? `${char.description.slice(0, 210)}...` \r\n                    : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                    ? `${comics.pageCount} p.`\r\n                    : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                    ? `${comics.prices[0].price}$`\r\n                    : 'not available'\r\n        };\r\n    };\r\n\r\n    return {\r\n        /* loading, \r\n        error, */ \r\n        clearError, \r\n        process, \r\n        setProcess,\r\n        getAllCharacters, \r\n        getCharacterByName,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic\r\n    }\r\n}\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  /*   const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null); */\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        // setLoading(true); \r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // setLoading(false); \r\n           \r\n            return data;\r\n\r\n        } catch(e) {\r\n            /* setLoading(false); \r\n            setError(e.message); */\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        // setError(null);\r\n        setProcess('loading');\r\n    }, []);\r\n    \r\n    return {/* loading, */ request, /* error, */ clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\nexport default setContent;"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","index","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","i","charId","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","error","_createClass","value","errorInfo","console","log","this","setState","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}